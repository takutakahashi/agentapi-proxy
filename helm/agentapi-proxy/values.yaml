# Default values for agentapi-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/takutakahashi/agentapi-proxy
  pullPolicy: IfNotPresent
  tag: ""

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
    # AWS IAM Role for S3 access (EKS + IRSA)
    # eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/agentapi-s3-role
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8080
  agentapiPort: 9000

ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: agentapi.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: agentapi-proxy-tls
      hosts:
        - agentapi.example.com

resources:
  requests:
    memory: "512Mi"
    cpu: "500m"
  limits:
    memory: "2Gi"
    cpu: "2000m"

# Persistent Volume for session data
persistence:
  enabled: true
  storageClassName: ""
  accessMode: ReadWriteOnce
  size: 10Gi

# Persistent Volume for myclaudes directory
myclaudesPersistence:
  enabled: true
  storageClassName: ""
  accessMode: ReadWriteOnce
  size: 3Gi

# GitHub configuration
github:
  # GitHub Enterprise Server を使用する場合は true に設定
  enterprise:
    enabled: false
    # GitHub Enterprise Server のベース URL
    # 例: https://github.company.com
    baseUrl: ""
    # GitHub Enterprise Server API の URL
    # 例: https://github.company.com/api/v3
    apiUrl: ""
  # GitHub App 認証設定
  app:
    # GitHub App ID
    id: ""
    # GitHub App Installation ID
    installationId: ""
    # GitHub App の秘密鍵（PEM形式）を含む Secret
    privateKey:
      # Secret 名
      secretName: ""
      # Secret 内のキー名
      key: "private-key"

# Application Configuration
config:
  # サーバー設定
  startPort: 9000
  
  # マルチユーザー設定
  enableMultipleUsers: false
  
  # 永続化設定
  persistence:
    enabled: false
    backend: "file"  # "file", "memory", "s3"
    filePath: "./sessions.json"
    syncIntervalSeconds: 30
    encryptSensitiveData: true
    sessionRecoveryMaxAgeHours: 24
    # S3設定（backend: "s3" の場合に使用）
    s3:
      bucket: ""
      region: "us-east-1"
      prefix: "sessions/"
      endpoint: ""  # カスタムS3エンドポイント（MinIOなど）
      # 認証情報（環境変数またはIAMロールを推奨）
      accessKey: ""
      secretKey: ""
  
  # 認証設定
  auth:
    enabled: false
    static:
      enabled: false
      headerName: "X-API-Key"
    github:
      enabled: false
      baseUrl: "https://api.github.com"
      tokenHeader: "Authorization"
      oauth:
        clientId: ""
        clientSecret: ""
        scope: "read:user read:org"
        baseUrl: ""
  
  # ロールベース環境変数ファイル設定
  roleEnvFiles:
    enabled: false
    path: "/etc/role-env-files"
    loadDefault: true

# Environment variables
env: []
  # - name: GITHUB_TOKEN
  #   value: "your-token"
  # - name: CLAUDE_ARGS
  #   value: "--dangerously-skip-permissions"
  # GitHub Enterprise Server を使用する場合の環境変数例
  # - name: GITHUB_URL
  #   value: "https://github.company.com"
  # - name: GITHUB_API
  #   value: "https://github.company.com/api/v3"

# Environment variables from ConfigMaps and Secrets
envFrom: []
  # - configMapRef:
  #     name: agentapi-config
  # - secretRef:
  #     name: agentapi-secrets

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Auth configuration (stored in ConfigMap and mounted to the container)
# This allows complex authorization rules that cannot be easily expressed as environment variables
authConfig:
  # Example configuration structure:
  # github:
  #   user_mapping:
  #     default_role: "user"
  #     default_permissions:
  #       - "read"
  #       - "session:create"
  #       - "session:list"
  #     team_role_mapping:
  #       "myorg/admins":
  #         role: "admin"
  #         permissions:
  #           - "*"
  #       "myorg/developers":
  #         role: "developer"
  #         permissions:
  #           - "read"
  #           - "write"
  #           - "execute"
  #           - "session:create"
  #           - "session:list"
  #           - "session:delete"
  #           - "session:access"
  #       "myorg/viewers":
  #         role: "viewer"
  #         permissions:
  #           - "read"
  #           - "session:list"

# Role-based environment files configuration
# This stores environment variables for each role in separate secrets
roleEnvFiles:
  # Configuration for role-based environment variables
  # 各ロール用の環境変数をSecretで管理するための設定
  enabled: false
  
  # Secret names for each role
  # Each secret should contain environment variables in KEY=VALUE format
  # 各ロール用のSecret名を指定
  secretNames:
    default: ""    # Secret name for default environment variables (all roles)
    admin: ""      # Secret name for admin role environment variables
    developer: ""  # Secret name for developer role environment variables
    user: ""       # Secret name for user role environment variables
    guest: ""      # Secret name for guest role environment variables
  
  # Example secret structure:
  # apiVersion: v1
  # kind: Secret
  # metadata:
  #   name: agentapi-env-admin
  # type: Opaque
  # data:
  #   admin.env: |
  #     LOG_LEVEL=debug
  #     ADMIN_ACCESS=true
  #     SECRET_KEY=admin-secret-123